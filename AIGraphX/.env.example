# .env.example - Environment variables for AIGraphX

# --- Core Settings ---
# LOG_LEVEL=INFO

# --- PostgreSQL Configuration ---
POSTGRES_USER=aigraphx_user
POSTGRES_PASSWORD=your_postgres_password
POSTGRES_DB=aigraphx
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
PG_POOL_MIN_SIZE=1
PG_POOL_MAX_SIZE=10

# --- Neo4j Configuration ---
NEO4J_URI=neo4j://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=your_neo4j_password
# NEO4J_DATABASE=neo4j # Optional, defaults to 'neo4j'

# --- Faiss Configuration ---
# Relative paths are assumed to be relative to the project root
FAISS_INDEX_PATH=./data/papers_faiss.index
FAISS_MAPPING_PATH=./data/papers_faiss_ids.json # Based on faiss_repo.py

# --- Sentence Transformer Configuration ---
SENTENCE_TRANSFORMER_MODEL=all-MiniLM-L6-v2
SENTENCE_TRANSFORMER_DEVICE=cpu

# --- API Keys (Store securely!) ---
# Use names consistent with compose.yml and config.py where applicable
HUGGINGFACE_API_KEY=your_hf_api_key_here     # Renamed from HUGGINGFACE_HUB_TOKEN
GITHUB_API_KEY=your_github_api_key_here       # Renamed from GITHUB_TOKEN
PWC_API_KEY=your_pwc_api_key_here           # Added PWC API Key

# --- Vectorization Settings ---
# Batch size for embedding generation
VECTORIZATION_BATCH_SIZE=32
# Max length for text truncation before embedding
VECTORIZATION_MAX_LENGTH=512

# --- Data Collection ---
# Max number of models to fetch from Hugging Face
MAX_HF_MODELS_TO_FETCH=1000 # Example value
# File path for storing collected data
COLLECTED_DATA_PATH=data/aigraphx_knowledge_data.jsonl
# File path for collection checkpoint
COLLECTION_CHECKPOINT_PATH=data/collection_checkpoint.txt

# --- Data Loading & Syncing ---
# Batch size for loading data into PostgreSQL
LOAD_PG_BATCH_SIZE=100
# Batch size for syncing data to Neo4j
SYNC_NEO4J_BATCH_SIZE=100
# Batch size for building Faiss index
BUILD_FAISS_BATCH_SIZE=128

# --- API Server Configuration (Uvicorn) ---
API_HOST=0.0.0.0
API_PORT=8000
RELOAD=true # Set to 'false' in production

# --- Testing Configuration (Optional but Recommended) ---
# Ensure this user/db exists or configure appropriate test setup
TEST_DATABASE_URL=postgresql://${TEST_POSTGRES_USER:-aigraphx_test_user}:${TEST_POSTGRES_PASSWORD:-aigraphx_test_password}@${TEST_POSTGRES_HOST:-localhost}:${TEST_POSTGRES_PORT:-5433}/${TEST_POSTGRES_DB:-aigraphx_test}
TEST_POSTGRES_USER=aigraphx_test_user
TEST_POSTGRES_PASSWORD=aigraphx_test_password
TEST_POSTGRES_DB=aigraphx_test
TEST_POSTGRES_HOST=localhost # Host for connecting from outside container (e.g., local pytest run)
TEST_POSTGRES_PORT=5433    # Host port mapped in compose.test.yml

TEST_NEO4J_URI=neo4j://${TEST_NEO4J_HOST:-localhost}:${TEST_NEO4J_PORT:-7688}
TEST_NEO4J_USER=neo4j
TEST_NEO4J_PASSWORD=test_password_test
TEST_NEO4J_HOST=localhost # Host for connecting from outside container
TEST_NEO4J_PORT=7688    # Host port mapped in compose.test.yml 