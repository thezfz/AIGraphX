# alembic.ini
# Alembic 的主配置文件。Alembic 是一个用于 SQLAlchemy 的数据库迁移工具，
# 它可以帮助管理数据库模式（表结构）的变更和版本控制。
# 这个文件定义了 Alembic 如何找到迁移脚本、连接到数据库以及其他行为。

# 一个通用的、针对单一数据库的配置示例。

[alembic]
# --- 核心配置 ---
# script_location: 指定存放 Alembic 迁移脚本的目录路径。
# 相对于 alembic.ini 文件的位置。这里设置为 'alembic' 目录。
# 推荐在所有操作系统上都使用正斜杠 '/'。
script_location = alembic

# file_template: 生成迁移脚本文件名的模板。默认是 '%%(rev)s_%%(slug)s' (版本号_描述)。
# 可以取消注释下面的行来添加日期时间前缀，例如：'YYYY_MM_DD_HHMM-版本号_描述'。
# 详细的可用标记请参考 Alembic 文档。
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# prepend_sys_path: 需要添加到 Python sys.path 开头的路径列表 (用 ':' 或 ';' 分隔)。
# 这允许迁移脚本导入项目中的其他模块。设置为 '.' 表示将当前工作目录添加到 sys.path。
prepend_sys_path = .

# timezone: 渲染迁移文件中的日期和文件名时使用的时区。
# 需要 python>=3.9 或 backports.zoneinfo 库。留空表示使用本地时区。
# timezone =

# truncate_slug_length: 文件名中 "slug" (描述部分) 的最大字符长度。
# truncate_slug_length = 40

# revision_environment: 设置为 'true' 会在执行 'alembic revision' 命令时
# (即使没有 --autogenerate)，也加载并执行 alembic/env.py 文件。通常保持 false。
# revision_environment = false

# sourceless: 设置为 'true' 允许将没有源 .py 文件 的 .pyc/.pyo 文件识别为版本。
# 通常保持 false。
# sourceless = false

# version_locations: 指定存放迁移脚本版本文件的位置，可以用分隔符指定多个目录。
# 默认为 script_location 下的 'versions' 子目录。
# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions

# version_path_separator: 用于分隔 'version_locations' 中多个路径的分隔符。
# 'os' (默认) 表示使用操作系统的路径分隔符 (Linux/Mac用':', Windows用';')。
# 其他可选值如 ':', ';', 'space', 'newline'。
version_path_separator = os

# recursive_version_locations: 设置为 'true' 会在每个 'version_locations' 目录中递归搜索版本文件。
# (Alembic 1.10+ 新增)
# recursive_version_locations = false

# output_encoding: 从 script.py.mako 模板生成迁移脚本时使用的输出编码。
# output_encoding = utf-8

# --- 数据库连接 ---
# sqlalchemy.url: 指定 Alembic 连接数据库的 URL。
# 这里使用了特殊语法 `env:DATABASE_URL`，表示 Alembic 将从名为 `DATABASE_URL`
# 的**环境变量**中读取实际的数据库连接 URL。
# 这使得数据库连接信息可以灵活配置，而无需硬编码在配置文件中。
# 确保在运行 Alembic 命令时设置了 `DATABASE_URL` 环境变量 (例如通过 .env 文件或系统环境变量)。
sqlalchemy.url = env:DATABASE_URL


# --- Post Write Hooks (可选) ---
# 定义在生成新的迁移脚本后自动运行的脚本或 Python 函数。
# 例如，可以使用 black 或 ruff 自动格式化新生成的迁移脚本。
[post_write_hooks]
# --- 示例：使用 black 格式化 ---
# hooks = black                     # 启用名为 'black' 的 hook
# black.type = console_scripts      # hook 类型：运行控制台脚本
# black.entrypoint = black          # 使用 'black' 命令
# black.options = -l 79 REVISION_SCRIPT_FILENAME # 传递给 black 的参数，REVISION_SCRIPT_FILENAME 会被替换为实际文件名

# --- 示例：使用 ruff 格式化并修复 ---
# hooks = ruff
# ruff.type = exec                  # hook 类型：执行可执行文件
# ruff.executable = %(here)s/.venv/bin/ruff # ruff 可执行文件的路径 (根据实际情况修改)
# ruff.options = check --fix REVISION_SCRIPT_FILENAME # 传递给 ruff 的参数


# --- 日志配置 ---
# Alembic 使用标准的 Python logging 模块。这里配置了日志记录器、处理器和格式化器。
[loggers]
# 定义要配置的日志记录器名称。
keys = root,sqlalchemy,alembic

[handlers]
# 定义要配置的日志处理器名称。
keys = console

[formatters]
# 定义要配置的日志格式化器名称。
keys = generic

# --- 配置 'root' 日志记录器 ---
[logger_root]
level = WARNING        # 日志级别：只记录 WARNING 及以上级别的信息。
handlers = console     # 使用名为 'console' 的处理器。
qualname =             # 'qualname' 通常留空，表示根记录器。

# --- 配置 'sqlalchemy' 日志记录器 ---
# 用于控制 SQLAlchemy 相关的日志输出（例如 SQL 查询语句）。
[logger_sqlalchemy]
level = WARNING        # 级别设为 WARNING，避免打印过多的 SQL 执行信息。如果需要调试 SQL，可以设为 INFO 或 DEBUG。
handlers =             # 这里留空，表示 sqlalchemy 的日志不直接输出到控制台 (由 root logger 控制)。
qualname = sqlalchemy.engine # 关联到 SQLAlchemy 引擎的日志。

# --- 配置 'alembic' 日志记录器 ---
# 用于控制 Alembic 自身的日志输出。
[logger_alembic]
level = INFO           # 日志级别：记录 INFO 及以上级别的信息 (例如迁移步骤)。
handlers =             # 留空，由 root logger 控制输出。
qualname = alembic     # 关联到 Alembic 的日志。

# --- 配置 'console' 处理器 ---
# 定义如何处理日志记录（这里是输出到控制台）。
[handler_console]
class = StreamHandler    # 使用 Python 内置的 StreamHandler。
args = (sys.stderr,)   # 将日志输出到标准错误流 (stderr)。
level = NOTSET         # 处理器级别设为 NOTSET，表示处理所有级别的日志记录（实际输出由 logger 级别控制）。
formatter = generic    # 使用名为 'generic' 的格式化器。

# --- 配置 'generic' 格式化器 ---
# 定义日志输出的格式。
[formatter_generic]
# format: 定义日志记录的格式字符串。
# %(levelname)-5.5s: 日志级别 (例如 INFO, WARNING)，左对齐，宽度 5。
# [%(name)s]: 日志记录器的名称 (例如 alembic, sqlalchemy.engine)。
# %(message)s: 实际的日志消息。
format = %(levelname)-5.5s [%(name)s] %(message)s
# datefmt: 日期/时间格式 (这里未使用 %(asctime)s，所以此项无效)。
datefmt = %H:%M:%S