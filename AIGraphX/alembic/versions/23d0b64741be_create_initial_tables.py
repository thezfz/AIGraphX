"""Create initial tables

Revision ID: 23d0b64741be
Revises:
Create Date: 2024-08-04 17:59:14.276074

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "23d0b64741be"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create hf_models table
    op.execute("""
    CREATE TABLE IF NOT EXISTS hf_models (
        hf_model_id VARCHAR(255) PRIMARY KEY,
        hf_author VARCHAR(255),
        hf_sha VARCHAR(64),
        hf_last_modified TIMESTAMPTZ,
        hf_downloads INTEGER,
        hf_likes INTEGER,
        hf_tags JSONB,
        hf_pipeline_tag VARCHAR(100),
        hf_library_name VARCHAR(100),
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
    );
    """)

    # Create papers table (!!! ADDED categories TEXT column !!!)
    op.execute("""
    CREATE TABLE IF NOT EXISTS papers (
        paper_id SERIAL PRIMARY KEY,
        pwc_id VARCHAR(255) UNIQUE,
        arxiv_id_base VARCHAR(50) UNIQUE,
        arxiv_id_versioned VARCHAR(60),
        title TEXT,
        authors JSONB,
        summary TEXT,
        published_date DATE,
        pdf_url TEXT,
        doi VARCHAR(255),
        primary_category VARCHAR(50),
        categories JSONB, -- Changed to JSONB for better consistency and querying
        pwc_title TEXT,
        pwc_url TEXT,
        area VARCHAR(50),
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW(),
        -- Ensure at least one ID is present
        CONSTRAINT chk_paper_identifier CHECK (pwc_id IS NOT NULL OR arxiv_id_base IS NOT NULL)
    );
    """)
    # Indexes for papers
    op.execute("CREATE INDEX IF NOT EXISTS idx_papers_pwc_id ON papers(pwc_id);")
    op.execute(
        "CREATE INDEX IF NOT EXISTS idx_papers_arxiv_id_base ON papers(arxiv_id_base);"
    )
    op.execute("CREATE INDEX IF NOT EXISTS idx_papers_area ON papers(area);")
    op.execute(
        "CREATE INDEX IF NOT EXISTS idx_papers_published_date ON papers(published_date);"
    )

    # Create model_paper_links table
    op.execute("""
    CREATE TABLE IF NOT EXISTS model_paper_links (
        link_id SERIAL PRIMARY KEY,
        hf_model_id VARCHAR(255) NOT NULL REFERENCES hf_models(hf_model_id) ON DELETE CASCADE,
        paper_id INTEGER NOT NULL REFERENCES papers(paper_id) ON DELETE CASCADE,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        UNIQUE (hf_model_id, paper_id)
    );
    """)
    # Indexes for model_paper_links
    op.execute(
        "CREATE INDEX IF NOT EXISTS idx_model_paper_links_model ON model_paper_links(hf_model_id);"
    )
    op.execute(
        "CREATE INDEX IF NOT EXISTS idx_model_paper_links_paper ON model_paper_links(paper_id);"
    )

    # Create pwc_tasks table
    op.execute("""
    CREATE TABLE IF NOT EXISTS pwc_tasks (
        task_id SERIAL PRIMARY KEY,
        paper_id INTEGER NOT NULL REFERENCES papers(paper_id) ON DELETE CASCADE,
        task_name VARCHAR(255) NOT NULL,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        UNIQUE (paper_id, task_name)
    );
    """)
    # Indexes for pwc_tasks
    op.execute("CREATE INDEX IF NOT EXISTS idx_pwc_tasks_paper ON pwc_tasks(paper_id);")
    op.execute("CREATE INDEX IF NOT EXISTS idx_pwc_tasks_name ON pwc_tasks(task_name);")

    # Create pwc_datasets table
    op.execute("""
    CREATE TABLE IF NOT EXISTS pwc_datasets (
        dataset_id SERIAL PRIMARY KEY,
        paper_id INTEGER NOT NULL REFERENCES papers(paper_id) ON DELETE CASCADE,
        dataset_name VARCHAR(255) NOT NULL,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        UNIQUE (paper_id, dataset_name)
    );
    """)
    # Indexes for pwc_datasets
    op.execute(
        "CREATE INDEX IF NOT EXISTS idx_pwc_datasets_paper ON pwc_datasets(paper_id);"
    )
    op.execute(
        "CREATE INDEX IF NOT EXISTS idx_pwc_datasets_name ON pwc_datasets(dataset_name);"
    )

    # Create pwc_methods table
    op.execute("""
    CREATE TABLE IF NOT EXISTS pwc_methods (
        method_id SERIAL PRIMARY KEY,
        paper_id INTEGER NOT NULL REFERENCES papers(paper_id) ON DELETE CASCADE,
        method_name VARCHAR(255) NOT NULL,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        UNIQUE (paper_id, method_name)
    );
    """)
    # Indexes for pwc_methods
    op.execute(
        "CREATE INDEX IF NOT EXISTS idx_pwc_methods_paper ON pwc_methods(paper_id);"
    )
    op.execute(
        "CREATE INDEX IF NOT EXISTS idx_pwc_methods_name ON pwc_methods(method_name);"
    )

    # Create pwc_repositories table
    op.execute("""
    CREATE TABLE IF NOT EXISTS pwc_repositories (
        repo_id SERIAL PRIMARY KEY,
        paper_id INTEGER NOT NULL REFERENCES papers(paper_id) ON DELETE CASCADE,
        url TEXT,
        stars INTEGER,
        is_official BOOLEAN,
        framework VARCHAR(100),
        created_at TIMESTAMPTZ DEFAULT NOW(),
        UNIQUE (paper_id, url)
    );
    """)
    # Indexes for pwc_repositories
    op.execute(
        "CREATE INDEX IF NOT EXISTS idx_pwc_repositories_paper ON pwc_repositories(paper_id);"
    )
    op.execute(
        "CREATE INDEX IF NOT EXISTS idx_pwc_repositories_url ON pwc_repositories(url);"
    )

    # Create Trigger function
    op.execute("""
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
       NEW.updated_at = NOW();
       RETURN NEW;
    END;
    $$ language 'plpgsql';
    """)

    # Apply trigger to tables
    op.execute(
        "CREATE TRIGGER update_hf_models_updated_at BEFORE UPDATE ON hf_models FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();"
    )
    op.execute(
        "CREATE TRIGGER update_papers_updated_at BEFORE UPDATE ON papers FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();"
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop triggers first
    op.execute("DROP TRIGGER IF EXISTS update_papers_updated_at ON papers;")
    op.execute("DROP TRIGGER IF EXISTS update_hf_models_updated_at ON hf_models;")

    # Drop trigger function
    op.execute("DROP FUNCTION IF EXISTS update_updated_at_column();")

    # Drop tables (in reverse order of creation or considering dependencies)
    op.execute("DROP TABLE IF EXISTS pwc_repositories CASCADE;")
    op.execute("DROP TABLE IF EXISTS pwc_datasets CASCADE;")
    op.execute("DROP TABLE IF EXISTS pwc_methods CASCADE;")
    op.execute("DROP TABLE IF EXISTS pwc_tasks CASCADE;")
    op.execute("DROP TABLE IF EXISTS model_paper_links CASCADE;")
    op.execute("DROP TABLE IF EXISTS papers CASCADE;")
    op.execute("DROP TABLE IF EXISTS hf_models CASCADE;")

    # Note: Indexes associated with tables are typically dropped automatically when the table is dropped.
    # Explicit DROP INDEX commands are usually not needed here unless they were created independently.

    # ### end Alembic commands ###
