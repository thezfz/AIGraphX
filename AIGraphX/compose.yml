# Podman Compose file for AIGraphX development environment (v1.0)
# Defines the FastAPI app, PostgreSQL, and Neo4j services.
services:
  # FastAPI Application Service
  app:
    # Build the image using the Containerfile in the current directory
    build:
      context: .
      dockerfile: Containerfile
    env_file: 
      - .env # Load variables from .env file
    environment:
      # --- 系统时区设置 ---
      - TZ=Asia/Shanghai
      # --- Proxy Settings (Using reliable host DNS name) ---
      # Use values from .env if defined, otherwise use these defaults
      - http_proxy=${HTTP_PROXY:-http://172.23.176.1:7890}
      - https_proxy=${HTTPS_PROXY:-http://172.23.176.1:7890}
      - HTTP_PROXY=${HTTP_PROXY:-http://172.23.176.1:7890}
      - HTTPS_PROXY=${HTTPS_PROXY:-http://172.23.176.1:7890}
      # --- Hosts that should NOT use the proxy ---
      - no_proxy=${NO_PROXY:-localhost,127.0.0.1,.internal,postgres,neo4j,host.containers.internal}
      - NO_PROXY=${NO_PROXY:-localhost,127.0.0.1,.internal,postgres,neo4j,host.containers.internal}
      # --- Application Specific Environment Variables (Loaded via env_file) ---
      # Values like API keys, DB passwords will be loaded from .env
      # Non-sensitive defaults can remain here or be defined in .env
      - SENTENCE_TRANSFORMER_MODEL=${SENTENCE_TRANSFORMER_MODEL:-all-MiniLM-L6-v2}
      - EMBEDDER_DEVICE=${EMBEDDER_DEVICE:-cuda}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
      - POSTGRES_USER=${POSTGRES_USER:-aigraphx_user} # Referenced by DATABASE_URL
      # POSTGRES_PASSWORD is loaded from .env via env_file
      - POSTGRES_DB=${POSTGRES_DB:-aigraphx}         # Referenced by DATABASE_URL
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}     # Referenced by DATABASE_URL
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}         # Referenced by DATABASE_URL
      # Construct DATABASE_URL using variables loaded from .env or defaults above
      - DATABASE_URL=postgresql://${POSTGRES_USER:-aigraphx_user}:${POSTGRES_PASSWORD}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-aigraphx}
      - NEO4J_URI=neo4j://neo4j:7687 # Service name for internal connection
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-test_password} # Use placeholder with default fallback
      - PWC_API_KEY=${PWC_API_KEY} # Use placeholder
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY} # Use placeholder
      - GITHUB_API_KEY=${GITHUB_API_KEY} # Use placeholder
      - RELOAD=true # For uvicorn --reload flag in CMD
      # 添加详细的Uvicorn日志配置
      - UVICORN_LOG_LEVEL=debug # 设置Uvicorn日志级别为debug
      - UVICORN_ACCESS_LOG=true # 启用访问日志记录
      # Add other necessary variables from .env or config if needed
    # Name the container for easier identification
    container_name: aigraphx_app
    # Map the host port 8000 to the container port 8000 (defined by API_PORT in .env)
    ports:
      - "8000:8000" # Expose app port
    # Mount the current directory into the container's /app directory
    # This allows code changes on the host to be reflected inside the container (for reload)
    volumes:
      - .:/app:z # ':z' is important for SELinux systems like Fedora
      # Mount data and logs directories as named volumes
      - ./data:/app/data
      - aigraphx_logs:/app/logs
    # Define dependencies: The app service depends on the database services
    depends_on:
      - postgres
      - neo4j
    # Connect this service to the defined network
    networks:
      - aigraphx_network
    # Set restart policy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all  # Request access to all available GPUs
              capabilities: [gpu]
    restart: unless-stopped
    # Add healthcheck for the app service
    healthcheck:
      # Ensure curl is available in the final image if using this
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s # Increased start period for GPU init and model loading

  # PostgreSQL Database Service
  postgres:
    # Use the official PostgreSQL 16 image
    image: docker.io/library/postgres:16
    # Use the .env file for PostgreSQL configuration (user, password, db)
    env_file:
      - .env
    # Name the container
    container_name: aigraphx_postgres
    # Map the host port 5432 to the container port 5432
    ports:
      - "5432:5432"
    # Mount a named volume for data persistence
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Connect this service to the defined network
    networks:
      - aigraphx_network
    # Set restart policy
    restart: unless-stopped
    # Add healthcheck for PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aigraphx_user} -d ${POSTGRES_DB:-aigraphx}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j Database Service
  neo4j:
    # Use the official Neo4j 5 image
    image: docker.io/library/neo4j:5
    # Use the .env file for Neo4j configuration (password)
    # Note: NEO4J_AUTH=neo4j/<password> format is required for Neo4j 5+
    environment:
      # Reference the password directly from .env (avoids hardcoded default)
      NEO4J_AUTH: "neo4j/${NEO4J_PASSWORD}" 
      # Other Neo4j config via environment variables if needed
      # NEO4J_server_memory_pagecache_size: 1g
      # NEO4J_server_memory_heap_initial__size: 1g
      # NEO4J_server_memory_heap_max__size: 1g
    # Name the container
    container_name: aigraphx_neo4j
    # Map the Neo4j ports (Bolt and HTTP)
    ports:
      - "7687:7687" # Bolt protocol (used by driver)
      - "7474:7474" # HTTP browser interface
      - "7473:7473" # HTTPS browser interface (if enabled)
    # Mount named volumes for data and logs persistence
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      # You might need to mount plugins or conf directories if needed
      # - neo4j_conf:/conf
      # - neo4j_plugins:/plugins
    # Connect this service to the defined network
    networks:
      - aigraphx_network
    # Set restart policy
    restart: unless-stopped
    # Add healthcheck for Neo4j
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --spider --tries=1 --timeout=5 http://localhost:7474 || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5

  frontend:
    container_name: aigraphx_frontend_dev
    build:
      context: ../AIGraphX_Frontend  # 相对于 AIGraphX/ 指向 AIGraphX_Frontend/
      dockerfile: Containerfile
    volumes:
      - ../AIGraphX_Frontend:/app:z   # 挂载前端代码, :z 用于 SELinux (常见于 Fedora)
      # 使用命名卷持久化 node_modules，而不是匿名卷
      - frontend_node_modules:/app/node_modules:z
    ports:
      - "5173:5173" # 映射 Vite 端口
    environment:
      - NODE_ENV=development
      # WDS_SOCKET_PORT=5173 # 有时需要明确指定 Websocket 端口给 Vite HMR
    # 确保前端和后端在同一个网络
    networks:
      - aigraphx_network # 必须与 backend 服务使用的网络一致
    # 确保后端服务已准备好接受连接（如果前端启动时需要立即代理 API）
    # depends_on:
    #   backend:
    #     condition: service_healthy # 假设 backend 有健康检查
    # 移除 stdin_open 和 tty 以便在后台 (-d) 模式下正确查看日志
    # stdin_open: true # 保持 stdin 打开
    # tty: true        # 分配 TTY
    # command: pnpm run dev --host # 也可以在 Containerfile 中设置 CMD

# Define named volumes for data persistence
volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  # neo4j_conf:
  # neo4j_plugins:
  aigraphx_data:
  aigraphx_logs:
  # 添加命名卷用于持久化前端 node_modules
  frontend_node_modules:

# Define the custom network
networks:
  aigraphx_network:
    driver: bridge
    name: aigraphx_dev_network # 建议为网络指定一个明确的名字

# 可以定义顶层 volumes (如果需要命名卷)
# volumes:
#   frontend_node_modules:

# 注意：确保 backend 服务也配置为使用 aigraphx_network
