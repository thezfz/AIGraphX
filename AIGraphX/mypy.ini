# mypy.ini
# Mypy 的配置文件。Mypy 是一个 Python 的静态类型检查器。
# 它可以帮助在不运行代码的情况下发现类型相关的错误，提高代码的健壮性和可维护性。
# 这个配置文件定义了 Mypy 如何检查你的项目代码。

[mypy]
# --- 全局设置 ---
# 指定项目使用的 Python 版本，Mypy 会根据这个版本的特性进行检查。
python_version = 3.11
# 如果函数的返回值类型是 Any (表示任何类型，通常意味着类型信息丢失)，则发出警告。
warn_return_any = True
# 如果配置文件中有未使用的配置项，则发出警告。
warn_unused_configs = True
# 不允许定义没有类型注解的函数或方法。强制要求为所有函数添加类型提示。
disallow_untyped_defs = True
# 不允许定义注解不完整的函数或方法（例如，只有部分参数有注解）。
disallow_incomplete_defs = True
# 默认忽略那些找不到类型存根 (stubs) 的第三方库的导入错误。
# 这很常见，因为不是所有库都提供或安装了类型信息。
# 设置为 True 可以避免大量关于第三方库的类型检查报错。
ignore_missing_imports = True
# 明确指定 Mypy 需要检查的文件或目录。这里指定了主要的源码目录 `aigraphx/` 和测试目录 `tests/`。
files = aigraphx/, tests/

# --- 针对特定模块的设置 ---
# 可以为某些特定的库或模块覆盖全局设置。

# [mypy-torch.*]: 针对所有 `torch` 及其子模块的设置。
[mypy-torch.*]
# 忽略 `torch` 库及其子模块中缺失的类型导入。因为 torch 自身的类型提示可能不完整或 Mypy 无法完全解析。
ignore_missing_imports = True
# ignore_errors = True # 这一行被注释掉了，它会完全忽略 torch 相关的所有类型错误，可能过于宽松。

# [mypy-torch.distributed.checkpoint.*]: 更具体地针对 `torch.distributed.checkpoint` 子模块。
[mypy-torch.distributed.checkpoint.*]
ignore_missing_imports = True

# [mypy-faiss.*]: 针对 `faiss` 库的设置。
[mypy-faiss.*]
# 忽略 `faiss` 库导入时可能出现的类型信息缺失错误。因为 `faiss` 是一个 C++ 库的 Python 封装，类型存根可能不完善。
ignore_missing_imports = True

# [mypy-asyncpg.*]: 针对 `asyncpg` 库的设置。
# asyncpg 是一个用于 PostgreSQL 的异步驱动程序。
[mypy-asyncpg.*]
# 忽略 `asyncpg` 相关的导入错误。
ignore_missing_imports = True

# 可以根据需要为其他第三方库添加类似的配置段，
# 特别是那些没有提供良好类型支持的库。
# 例如：
# [mypy-sentence_transformers.*]
# ignore_missing_imports = True
#
# [mypy-other_library.*]
# ignore_missing_imports = True
# ignore_errors = True # 如果这个库的类型问题实在太多，可以考虑完全忽略错误，但不推荐。
