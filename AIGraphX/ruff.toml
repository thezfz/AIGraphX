# ruff.toml
# Ruff 的配置文件。Ruff 是一个用 Rust 编写的极其快速的 Python linter (代码检查器) 和 formatter (代码格式化器)。
# 它旨在取代 Flake8, isort, pydocstyle, Black 等多个工具，提供统一且高效的代码质量管理体验。

# --- 基本格式化选项 (兼容 Black) ---
# 设置代码行的最大长度。与 Black 格式化工具的默认值保持一致。
line-length = 88
# 设置缩进宽度为 4 个空格。
indent-width = 4

# --- 目标 Python 版本 ---
# 告知 Ruff 项目使用的 Python 版本，以便应用特定版本的规则和语法检查。
target-version = "py311" # 假设项目使用 Python 3.11

# --- Linter (代码检查) 配置 ---
[lint]
# `select`: 选择要启用的规则代码集合。
# E: pycodestyle 错误 (Errors)
# F: Pyflakes 检查 (逻辑错误、未使用变量/导入等)
# W: pycodestyle 警告 (Warnings)
# I: isort 检查 (导入排序)
# D: pydocstyle 检查 (文档字符串风格和完整性)
# B: flake8-bugbear 检查 (代码中可能的 Bug 或设计问题)
# RUF: Ruff 特定的规则
select = ["E", "F", "W", "I", "D", "B", "RUF"]

# `ignore`: 禁用特定的规则代码。
ignore = [
    "E501", # 禁用 "行过长" 规则，因为这个由格式化器 (formatter) 处理。
    "D100", # 禁用 "公共模块缺少文档字符串" 规则。
    "D104", # 禁用 "公共包缺少文档字符串" 规则。
    "D107", # 禁用 "__init__ 文件缺少文档字符串" 规则。
    # 可以根据项目需要忽略更多规则。
]

# `per-file-ignores`: 针对特定文件或路径模式，禁用某些规则。
[lint.per-file-ignores]
# 在所有的 `__init__.py` 文件中，忽略 "F401" (未使用的导入) 规则。
# 这很常见，因为 `__init__.py` 文件有时只用于导入供包外部使用的名称。
"__init__.py" = ["F401"]

# `pydocstyle`: 配置 pydocstyle 规则的行为。
[lint.pydocstyle]
# 指定期望的文档字符串风格约定。
# "google": 遵循 Google Python Style Guide 的文档字符串格式。
# 其他选项包括 "numpy", "pep257"。
convention = "google"

# --- Formatter (代码格式化) 配置 ---
[format]
# `quote-style`: 指定字符串使用的引号类型。
# "double": 优先使用双引号 (")。 (类似 Black)
# "single": 优先使用单引号 (')。
quote-style = "double"

# `indent-style`: 指定缩进使用的字符。
# "space": 使用空格进行缩进。 (类似 Black)
# "tab": 使用制表符进行缩进。
indent-style = "space"

# `skip-magic-trailing-comma`: 是否保留魔法尾随逗号。
# false: 不跳过，保留魔法尾随逗号 (类似 Black)。这有助于减少版本控制中的差异。
# true: 移除魔法尾随逗号。
skip-magic-trailing-comma = false

# `line-ending`: 指定文件的换行符类型。
# "auto": 自动检测并保持文件现有的换行符类型 (LF 或 CRLF)。 (类似 Black)
# "lf": 强制使用 LF (Unix 风格)。
# "crlf": 强制使用 CRLF (Windows 风格)。
line-ending = "auto"